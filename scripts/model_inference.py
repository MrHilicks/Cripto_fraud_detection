# scripts/model_inference.py

import os
import joblib
import pandas as pd
from catboost import CatBoostClassifier

from scripts.data_preprocessing import DataPreprocessor, FeaturePreprocessor

# === –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º ===
MODEL_PATH = os.path.join("models", "catboost_model.cbm")
PREPROCESSOR_PATH = os.path.join("models", "feature_preprocessor.pkl")


def load_model(model_path: str) -> CatBoostClassifier:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ CatBoost."""
    model = CatBoostClassifier()
    model.load_model(model_path)
    return model


def load_preprocessor(preprocessor_path: str) -> FeaturePreprocessor:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."""
    return FeaturePreprocessor.load(preprocessor_path)


def data_preprocess(df: pd.DataFrame, feature_preprocessor: FeaturePreprocessor) -> pd.DataFrame:
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö."""
    return DataPreprocessor().data_preprocessing(df, feature_preprocessor)


def predict(df: pd.DataFrame) -> list:
    """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    feature_preprocessor = load_preprocessor(PREPROCESSOR_PATH)
    df_processed = data_preprocess(df, feature_preprocessor)
    preds = load_model(MODEL_PATH).predict(df_processed)
    return preds.tolist()


if __name__ == "__main__":
    # === –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö parquet-—Ñ–∞–π–ª–∞—Ö ===
    TEST_CASES_DIR = os.path.join("Data", "Test Cases")
    test_files = ["Sample_1.parquet", "Sample_2.parquet", "Sample_3.parquet"]

    for file_name in test_files:
        file_path = os.path.join(TEST_CASES_DIR, file_name)

        if not os.path.exists(file_path):
            print(f"‚ö†Ô∏è  File not found: {file_path}")
            continue

        print(f"\n=== üîç Running prediction for: {file_name} ===")
        df = pd.read_parquet(file_path)

        try:
            prediction = predict(df)
            print(f"‚úÖ Prediction class: {prediction}")
        except Exception as e:
            print(f"‚ùå Error during prediction for {file_name}: {e}")
